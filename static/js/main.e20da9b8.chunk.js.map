{"version":3,"sources":["Components/Timer/Timer.js","Components/Controls/Controls.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","className","Math","floor","time","Controls","stopStartBtn","React","useRef","waitBtn","resetBtn","useState","setTime","useEffect","isStart","isWait","isReset","latestValue","stopwatch$","BehaviorSubject","timer$","interval","pipe","map","v","takeWhile","stopStart$","fromEvent","current","mergeMap","console","log","subscribe","next","wait$","buffer","debounce","timer","filter","clickArray","isDoubleClick","length","reset$","unsubscribe","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAGO,SAASA,EAAMC,GAClB,OACI,oCACI,mBAAGC,UAAU,YAAb,uBACA,oBAAGA,UAAU,YAAb,UACKC,KAAKC,MAAMH,EAAMI,KAAO,MACnBJ,EAAMI,KAAO,MAAQ,GACjBF,KAAKC,MAAMH,EAAMI,KAAO,MACxB,IAAMF,KAAKC,MAAMH,EAAMI,KAAO,MAClC,KAAM,IALhB,IAOKF,KAAKC,MAAMH,EAAMI,KAAO,IACnBJ,EAAMI,KAAO,IAAM,GACfF,KAAKC,MAAMH,EAAMI,KAAO,IACxB,IAAMF,KAAKC,MAAMH,EAAMI,KAAO,IAClC,KAAM,IAXhB,IAYMJ,EAAMI,KAAO,IAAM,GAAKJ,EAAMI,KAAO,GAAK,IAAOJ,EAAMI,KAAO,SCZzE,SAASC,IACf,IAAMC,EAAeC,IAAMC,OAAO,MAC5BC,EAAUF,IAAMC,OAAO,MACvBE,EAAWH,IAAMC,OAAO,MAHJ,EAOFD,IAAMI,SAAS,GAPb,mBAOnBP,EAPmB,KAObQ,EAPa,KAsF3B,OA7ECL,IAAMM,WAAU,WACf,IAAIC,GAAU,EACVC,GAAS,EACTC,GAAU,EACVC,EAAc,EAEZC,EAAa,IAAIC,IAAgB,IACjCC,EAASC,YAAS,KAAMC,KAC1BC,aAAI,SAACC,GAAD,OAAOA,EAAIP,KACfQ,aAAU,SAACD,GAKV,OAJIT,IACHA,GAAS,EACTE,EAAcO,GAERV,MAINY,EAAaC,YAAUrB,EAAasB,QAAS,SAC9CN,KACGO,aAAS,WASR,OARAC,QAAQC,IAAI,uBACZjB,GAAWA,KACGG,EAAc,GACxBD,IACHA,GAAU,EACVC,EAAc,EACda,QAAQC,IAAI,sCAENX,MAGXY,WAAU,SAACR,GACNR,GAASE,EAAWe,KAAKT,MAG7BU,EAAQP,YAAUlB,EAAQmB,QAAS,SACzCM,EACKZ,KACGa,YAAOD,EAAMZ,KAAKc,aAAS,kBAAMC,YAAM,UACvCC,aAAO,SAACC,GACP,IAAMC,EAAsC,IAAtBD,EAAWE,OAKjC,OAJID,IACHzB,GAAS,EACTD,GAAU,GAEJ0B,MAGXR,WAAU,WACVF,QAAQC,IAAI,iBACZf,GAAU,KAGf,IAAM0B,EAASf,YAAUjB,EAASkB,QAAS,SACtCN,KACGO,aAAS,WAKR,OAJAC,QAAQC,IAAI,iBACZf,GAAU,EACVF,GAAU,EACVG,EAAc,EACPG,MAGXY,WAAU,SAACR,GAAD,OAAON,EAAWe,KAAKT,MAKtC,OAHAN,EAAWc,WAAU,SAACR,GACrBZ,EAAQY,MAEF,WACNN,EAAWyB,cACXjB,EAAWiB,cACXvB,EAAOuB,cACPT,EAAMS,cACND,EAAOC,iBAEN,IAEH,oCACC,cAAC5C,EAAD,CAAOK,KAAMA,IACb,sBAAKH,UAAU,UAAf,UACC,wBAAQ2C,IAAKtC,EAAb,wBACA,wBAAQsC,IAAKnC,EAAb,kBACA,wBAAQmC,IAAKlC,EAAb,yBCpFYmC,MAVf,WAGE,OACI,qBAAK5C,UAAU,MAAf,SACE,cAACI,EAAD,OCEOyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e20da9b8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nexport function Timer(props) {\r\n    return (\r\n        <section>\r\n            <p className=\"app-title\">Stopwatch</p>\r\n            <p className=\"app-timer\">\r\n                {Math.floor(props.time / 3600)\r\n                    ? props.time / 3600 >= 10\r\n                        ? Math.floor(props.time / 3600)\r\n                        : '0' + Math.floor(props.time / 3600)\r\n                    : '00'}{' '}\r\n                :\r\n                {Math.floor(props.time / 60)\r\n                    ? props.time / 60 >= 10\r\n                        ? Math.floor(props.time / 60)\r\n                        : '0' + Math.floor(props.time / 60)\r\n                    : '00'}{' '}\r\n                :{props.time % 60 >= 10 ? props.time % 60 : '0' + (props.time % 60)}\r\n            </p>\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport \"../../index.css\"\r\nimport {BehaviorSubject, fromEvent, interval, timer} from \"rxjs\";\r\nimport {buffer, debounce, filter, map, mergeMap, takeWhile} from \"rxjs/operators\";\r\nimport {Timer} from \"../Timer/Timer\";\r\n\r\n\r\nexport function Controls() {\r\n const stopStartBtn = React.useRef(null);\r\n const waitBtn = React.useRef(null);\r\n const resetBtn = React.useRef(null);\r\n\r\n\r\n\r\n const [time, setTime] = React.useState(0);\r\n\r\n React.useEffect(() => {\r\n  let isStart = false;\r\n  let isWait = false;\r\n  let isReset = false;\r\n  let latestValue = 0;\r\n\r\n  const stopwatch$ = new BehaviorSubject('');\r\n  const timer$ = interval(1000).pipe(\r\n      map((v) => v + latestValue),\r\n      takeWhile((v) => {\r\n       if (isWait) {\r\n        isWait = false;\r\n        latestValue = v;\r\n       }\r\n       return isStart;\r\n      }),\r\n  );\r\n\r\n  const stopStart$ = fromEvent(stopStartBtn.current, 'click')\r\n      .pipe(\r\n          mergeMap(() => {\r\n           console.log('Stop/Start Clicked');\r\n           isStart = !isStart;\r\n           if (!isStart) latestValue = 0;\r\n           if (isReset) {\r\n            isReset = false;\r\n            latestValue = 0;\r\n            console.log('isReset set to true in stop/start');\r\n           }\r\n           return timer$;\r\n          }),\r\n      )\r\n      .subscribe((v) => {\r\n       if (!isReset) stopwatch$.next(v);\r\n      });\r\n\r\n  const wait$ = fromEvent(waitBtn.current, 'click');\r\n  wait$\r\n      .pipe(\r\n          buffer(wait$.pipe(debounce(() => timer(250)))),\r\n          filter((clickArray) => {\r\n           const isDoubleClick = clickArray.length === 2;\r\n           if (isDoubleClick) {\r\n            isWait = true;\r\n            isStart = false;\r\n           }\r\n           return isDoubleClick;\r\n          }),\r\n      )\r\n      .subscribe(() => {\r\n       console.log('Wait Clicked!');\r\n       isReset = false;\r\n      });\r\n\r\n  const reset$ = fromEvent(resetBtn.current, 'click')\r\n      .pipe(\r\n          mergeMap(() => {\r\n           console.log('Reset Clicked');\r\n           isReset = true;\r\n           isStart = true;\r\n           latestValue = 0;\r\n           return timer$;\r\n          }),\r\n      )\r\n      .subscribe((v) => stopwatch$.next(v));\r\n\r\n  stopwatch$.subscribe((v) => {\r\n   setTime(v);\r\n  });\r\n  return () => {\r\n   stopwatch$.unsubscribe();\r\n   stopStart$.unsubscribe();\r\n   timer$.unsubscribe();\r\n   wait$.unsubscribe();\r\n   reset$.unsubscribe();\r\n  };\r\n }, []);\r\nreturn(\r\n <section>\r\n  <Timer time={time}/>\r\n  <div className=\"buttons\">\r\n   <button ref={stopStartBtn}>Start/Stop</button>\r\n   <button ref={waitBtn}>Wait</button>\r\n   <button ref={resetBtn}>Reset</button>\r\n  </div>\r\n </section>\r\n)\r\n}","import React from 'react';\nimport './index.css';\n\nimport {Controls} from \"./Components/Controls/Controls\";\n\nfunction App() {\n\n\n  return (\n      <div className=\"App\">\n        <Controls/>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}